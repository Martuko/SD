# docker-compose.yml (extendido con Kafka)

version: "3.9"

services:
  # ---- EXISTENTES ----
  ollama:
    image: ollama/ollama:latest
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    environment:
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_KEEP_ALIVE=30m

  llm:
    build: ./Servicios/LLM
    command: uvicorn app:app --host 0.0.0.0 --port 8000
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - LLM_MODEL=llama3.1:8b-instruct-q4_K_M
      - LLM_MAX_TOKENS=512
      - LLM_TEMPERATURE=0.2
    depends_on:
      - kafka
      - ollama
          
    ports:
      - "8000:8000"

  redis:
    image: redis:7

  cache:
    build: ./Servicios/Cache
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - kafka
      - redis
        
    ports:
      - "8001:8001"

  score:
    build: ./Servicios/Score
    depends_on:
      - kafka
      - llm
      - storage
    ports:
      - "8002:8002"

  db:
    image: postgres:16
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=qa
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d qa || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 20

  storage:
    build: ./Servicios/Storage
    command: uvicorn app:app --host 0.0.0.0 --port 8003
    environment:
      - DATABASE_URL=postgresql://app:app@db:5432/qa
      - DB_INIT_MAX_RETRIES=60
      - DB_INIT_RETRY_DELAY=1.0
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8003:8003"
    volumes:
      - ./data:/data

  traffic:
    build: ./Servicios/Traffic
    command: uvicorn app:app --host 0.0.0.0 --port 8010
    environment:
      - SAMPLE_LIMIT=60000
      - DIST=poisson
      - RATE=5.0
      - CONCURRENCY=10
      - DURATION=60
    depends_on:
      - kafka
      - cache
      - storage
    ports:
     - "8010:8010"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: sd-kafka-1
    hostname: kafka
    ports:
      - "9092:9092"   # puerto contenedores
      - "29092:29092" # puerto host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper: 
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092

volumes:
  ollama:
  dbdata:
